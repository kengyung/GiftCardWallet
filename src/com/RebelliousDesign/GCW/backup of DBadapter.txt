    /*private static class DatabaseHelper extends SQLiteOpenHelper {

        DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {

            db.execSQL(DATABASE_CREATE);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
                    + newVersion + ", which will destroy all old data");
            db.execSQL("DROP TABLE IF EXISTS giftcards");
            onCreate(db);
        }
    }

    /*
    /**
     * Constructor - takes the context to allow the database to be
     * opened/created
     * 
     * @param ctx the Context within which to work
     */
    /*public GiftCardDbAdapter(Context ctx) {
        this.mCtx = ctx;
    }*/

    /**
     * Open the notes database. If it cannot be opened, try to create a new
     * instance of the database. If it cannot be created, throw an exception to
     * signal the failure
     * 
     * @return this (self reference, allowing this to be chained in an
     *         initialization call)
     * @throws SQLException if the database could be neither opened or created
     */
    public GiftCardDbAdapter open() throws SQLException {
        mDbHelper = new DatabaseHelper(mCtx);
        mDb = mDbHelper.getWritableDatabase();
        return this;
    }

    public void close() {
        mDbHelper.close();
    }


    /**
     * Create a new note using the company and serial provided. If the note is
     * successfully created return the new rowId for that note, otherwise return
     * a -1 to indicate failure.
     * 
     * @param company the company of the note
     * @param serial the serial of the note
     * @return rowId or -1 if failed
     */
    public long createCard(String company, String serial, String expiry, String phone,String balance, String notes) {
        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_COMPANY, company);
        initialValues.put(KEY_SERIAL, serial);
		initialValues.put(KEY_EXPIRY, expiry);
		initialValues.put(KEY_PHONE, phone);
		initialValues.put(KEY_BALANCE, balance); 
		initialValues.put(KEY_NOTES, notes); 

        return mDb.insert(DATABASE_TABLE, null, initialValues);
    }

    /**
     * Delete the note with the given rowId
     * 
     * @param rowId id of note to delete
     * @return true if deleted, false otherwise
     */
    public boolean deleteCard(long rowId) {

        return mDb.delete(DATABASE_TABLE, KEY_ROWID + "=" + rowId, null) > 0;
    }

    /**
     * Return a Cursor over the list of all notes in the database
     * 
     * @return Cursor over all notes
     */
    public Cursor fetchAllCards() {

        return mDb.query(DATABASE_TABLE, new String[] {KEY_ROWID, KEY_COMPANY,
                KEY_SERIAL,KEY_EXPIRY,KEY_PHONE,KEY_BALANCE,KEY_NOTES}, null, null, null, null, null);
    }

    /**
     * Return a Cursor positioned at the note that matches the given rowId
     * 
     * @param rowId id of note to retrieve
     * @return Cursor positioned to matching note, if found
     * @throws SQLException if note could not be found/retrieved
     */
    public Cursor fetchCard(long rowId) throws SQLException {

        Cursor mCursor =

            mDb.query(true, DATABASE_TABLE, new String[] {KEY_ROWID,
                    KEY_COMPANY, KEY_SERIAL,KEY_EXPIRY,KEY_PHONE,KEY_BALANCE,KEY_NOTES}, KEY_ROWID + "=" + rowId, null,
                    null, null, null, null);
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;

    }

    /**
     * Update the note using the details provided. The note to be updated is
     * specified using the rowId, and it is altered to use the company and serial
     * values passed in
     * 
     * @param rowId id of note to update
     * @param company value to set note company to
     * @param serial value to set note serial to
     * @return true if the note was successfully updated, false otherwise
     */
    public boolean updateCard(long rowId, String company, String serial,String expiry, String phone,String balance, String notes) {
        ContentValues args = new ContentValues();
        args.put(KEY_COMPANY, company);
        args.put(KEY_SERIAL, serial);
		args.put(KEY_EXPIRY, expiry);
		args.put(KEY_PHONE, phone);
		args.put(KEY_BALANCE, balance); 
		args.put(KEY_NOTES, notes); 

        return mDb.update(DATABASE_TABLE, args, KEY_ROWID + "=" + rowId, null) > 0;
    }
    